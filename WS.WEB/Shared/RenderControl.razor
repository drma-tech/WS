@using WS.WEB.Resources
@typeparam TModel where TModel : class

@if (Status == LoadingStatus.Loading)
{
    if (PartialComponent)
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="40px" Animation="Animation.Wave" />
    }
    else
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="100px" Animation="Animation.Wave" />
    }
}
else if (Status == LoadingStatus.Error && !PartialComponent)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Dense="true" Icon="@IconsFA.Solid.Icon("bug").Font" Style="text-align: justify;">
        @(MessageError ?? GlobalTranslations.CustomVisibilityInvalid)
    </MudAlert>
}
else if (Status == LoadingStatus.Warning && !PartialComponent)
{
    <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Dense="true" Icon="@IconsFA.Solid.Icon("circle-exclamation").Font" Style="text-align: justify;">
        @(MessageWarning ?? GlobalTranslations.CustomVisibilityNoData)
    </MudAlert>
}
else //ShowContent
{
    @ChildContent
}

@code {
    [Parameter][EditorRequired] public RenderFragment ChildContent { get; set; } = null!;
    [Parameter][EditorRequired] public RenderControlCore<TModel> Core { get; set; } = null!;
    [Parameter][EditorRequired] public TModel Model { get; set; } = null!;
    [Parameter][EditorRequired] public Func<TModel, bool> ExpressionEmpty { get; set; } = null!;

    [Parameter] public bool PrivateContent { get; set; }
    [Parameter] public string? CustomMessageError { get; set; }
    [Parameter] public string? CustomMessageWarning { get; set; }
    [Parameter] public bool PartialComponent { get; set; }
    [Parameter] public bool PremiumFeature { get; set; }
    [Parameter] public string? PremiumDescription { get; set; }

    public LoadingStatus Status { get; set; } = LoadingStatus.Loading;
    private string? MessageLoading { get; set; } = GlobalTranslations.CustomVisibilityLoading;
    private string? MessageError { get; set; }
    private string? MessageWarning { get; set; }

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(ChildContent);
        ArgumentNullException.ThrowIfNull(Core);
        ArgumentNullException.ThrowIfNull(ExpressionEmpty);

        if (!ExpressionEmpty(Model))
            Status = LoadingStatus.ShowContent;

        Core.LoadingStarted += () => ShowLoading();
        Core.ProcessingStarted += () => ShowLoading("Processing...");

        Core.LoadingFinished += ShowContent;
        Core.ProcessingFinished += ShowContent;

        Core.WarningAction += ShowWarning;
        Core.ErrorAction += ShowError;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        ArgumentNullException.ThrowIfNull(Core);

        await base.OnAfterRenderAsync(firstRender);
    }

    private void ShowLoading(string? msg = null)
    {
        if (Status is LoadingStatus.Error) return;

        Status = LoadingStatus.Loading;
        MessageLoading = msg ?? GlobalTranslations.CustomVisibilityLoading;

        StateHasChanged();
    }

    private void ShowContent(TModel? model)
    {
        if (PartialComponent)
        {
            Status = LoadingStatus.ShowContent;
            StateHasChanged();
            return;
        }

        if (Status is LoadingStatus.Error) return;

        if (model == null || (ExpressionEmpty(model)))
        {
            ShowWarning(GlobalTranslations.CustomVisibilityNoData);
        }
        else
        {
            Status = LoadingStatus.ShowContent;
        }

        StateHasChanged();
    }

    /// <summary>
    /// </summary>
    /// <param name="msg">Default: no data</param>
    private void ShowWarning(string? msg)
    {
        if (Status is LoadingStatus.Error) return;

        Status = LoadingStatus.Warning;
        MessageWarning = CustomMessageWarning ?? msg;

        StateHasChanged();
    }

    /// <summary>
    /// </summary>
    /// <param name="msg">Default: invalid operation</param>
    private void ShowError(string? msg)
    {
        Status = LoadingStatus.Error;
        MessageError = CustomMessageError ?? msg;

        StateHasChanged();
    }

}
