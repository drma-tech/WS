@using WS.WEB.Modules.Subscription.Core
@inherits ComponentCore<GoogleAdSense>

@inject IpInfoApi IpInfoApi
@inject IJSRuntime JS

@if (IsLocalhost)
{
    <div style="text-align: center;">
        <MudText Typo="Typo.caption">Advertising</MudText>
    </div>
    <div style="text-align: center;">
        <ins class="@($"adsbygoogle custom-ad mb-3 {(IsMobile ? " mobile " : "")}")" data-ad-status="unfilled"
             style="@($"display: block; min-width: 300px; min-height: {(IsMobile || Format == "horizontal" ? "100" : "280")}px; text-align: center; border-width: 1px; border-radius: 4px; border-color: var(--mud-palette-lines-inputs); background-color: white;")">
            <div></div>
        </ins>
    </div>
}
else
{
    <div style="text-align: center;">
        <MudText Typo="Typo.caption">Advertising</MudText>
    </div>
    <div id="@_containerId" @key="@_containerId" style="text-align: center;"></div>
}

@code {
    [Parameter][EditorRequired] public AdUnit Section { get; set; } = AdUnit.Global;
    [Parameter] public string? Format { get; set; }

    private bool IsMobile => AppStateStatic.BrowserWindowSize?.Width <= 600 || AppStateStatic.BrowserWindowSize?.Height <= 600;
    private string? AdFormat => Format ?? (IsMobile ? "horizontal" : "auto");
    private bool IsLocalhost => Navigation.BaseUri.Contains("localhost");

    private const string AdClientId = "5145928155833172";
    private readonly string _containerId = $"ad-container-{Guid.NewGuid()}";

    private readonly Dictionary<string, string> _BlockedCountries = new()
    {
        { "CU", "Cuba" },
        { "IR", "Iran" },
        { "KP", "North Korea" },
        { "CN", "China (Mainland)" }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !IsLocalhost)
        {
            var country = await AppStateStatic.GetCountry(IpInfoApi, JS);

            if (country == "CN")
            {
                //todo: implement https://www.baiduadvertising.com/
            }
            else if (_BlockedCountries.ContainsKey(country))
            {
                //do not show ads
            }
            else
            {
                await JS.InvokeVoidAsync("createAd", $"ca-pub-{AdClientId}", ((long)Section).ToString(), AdFormat, _containerId);
            }
        }
    }

    public enum AdUnit : long
    {
        Global = 6236322353
    }
}
