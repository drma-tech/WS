@inherits ComponentCore<SettingsPopup>

@inject IJSRuntime JsRuntime

<MudDialog Style="width: 100%">
    <DialogContent>
        <MudToggleGroup Value="DarkMode" ValueChanged="(bool vl) => DarkModeChanged(vl)" SelectionMode="SelectionMode.SingleSelection" Vertical="false" Color="Color.Primary">
            <MudToggleItem Value="false">
                <MudIcon Icon="@IconsFA.Solid.Icon("sun").Font" Title="Light Mode" Class="me-1"></MudIcon>
                Light Mode
            </MudToggleItem>
            <MudToggleItem Value="true">
                <MudIcon Icon="@IconsFA.Solid.Icon("moon").Font" Title="Dark Mode" Class="me-1"></MudIcon>
                Dark Mode
            </MudToggleItem>
        </MudToggleGroup>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => { MudDialog?.Close(); })">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    public bool DarkMode { get; set; } = false;

    protected override async Task LoadEssentialDataAsync()
    {
        DarkMode = await AppStateStatic.GetDarkMode(JsRuntime) ?? false;
    }

    protected async Task DarkModeChanged(bool value)
    {
        DarkMode = value;

        await JsRuntime.InvokeAsync<string>("SetLocalStorage", "dark-mode", value.ToString()?.ToLower());

        AppStateStatic.ChangeDarkMode(value);
    }

}
