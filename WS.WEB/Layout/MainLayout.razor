@using System.Security.Claims
@using Toolbelt.Blazor.PWA.Updater
@using WS.Shared.Enums
@using WS.WEB.Resources
@using WS.WEB.Properties
@inherits LayoutComponentBase

@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar

<MudThemeProvider @ref="_mudThemeProvider" IsDarkMode="@AppStateStatic.DarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudMessageBox />
<MudSnackbarProvider />

<PWAUpdater Text="@GlobalTranslations.PWAUpdaterText" ButtonCaption="@GlobalTranslations.PWAUpdaterButton" />

<MudLayout>
    <HeadLayout></HeadLayout>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-3" Style="min-height: calc(100vh - 64px - 32px);">
            @if (IsLoading)
            {
                <div style="position:fixed; top:0; left:0; width:100vw; height:100vh; display:flex; align-items:center; justify-content:center; background:rgba(255,255,255,0.5);">
                    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Size="Size.Large" />
                </div>
            }
            else
            {
                @Body
            }
        </MudContainer>
        <FooterComponent></FooterComponent>
        <MudDivider Class="my-3 mt-10"></MudDivider>
        <MudText Align="Align.Center" Class="mb-3">
            © 2025-@DateTime.Now.Year - DRMA Tech.
        </MudText>
    </MudMainContent>
</MudLayout>

@code {
    private bool IsLoading = true;
    private MudThemeProvider? _mudThemeProvider;

    protected override void OnInitialized()
    {
        try
        {
            AppStateStatic.DarkModeChanged += StateHasChanged;
            AppStateStatic.ShowError = msg => { Snackbar.Add(msg, Severity.Error); };
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //DARK MODE
            var darkMode = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "dark-mode");

            if (darkMode.Empty())
            {
                darkMode = (await _mudThemeProvider!.GetSystemDarkModeAsync()).ToString();

                await JsRuntime.InvokeAsync<string>("SetLocalStorage", "dark-mode", darkMode);
            }

            AppStateStatic.ChangeDarkMode(bool.Parse(darkMode));

            //PLATFORM

            var platform = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "platform");

            AppStateStatic.Platform = Enum.Parse<Platform>(platform);
            AppStateStatic.Version = BuildDateString();
        }
    }

    [JSInvokable]
    public static void ShowError(string error)
    {
        AppStateStatic.ShowError?.Invoke(error);
    }

    //https://swharden.com/blog/2020-12-29-blazor-build-info/
    public static string BuildDateString()
    {
        try
        {
            return Resources.BuildDate.ReplaceLineEndings("").Trim();
        }
        catch (Exception)
        {
            return "Version Error";
        }
    }

}
