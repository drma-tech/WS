@page "/sitemap"

@using System.Xml.Linq
@using WS.WEB.Modules.Search.Core
@inherits PageCore<Sitemap>

@inject IJSRuntime JsRuntime
@inject IHttpClientFactory HttpClientFactory

<SeoHeader Title="sitemap generator" Keywords="@(["sitemap generator"])"
           Description="Lists site pages in XML. Ensures search engines find and index content faster, critical for large or poorly linked websites." Url="/sitemap"></SeoHeader>
@* <GoogleAdSense Section="@GoogleAdSense.AdUnit.Global"></GoogleAdSense> *@

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" md="10">
        <HeadPage Title="sitemap generator" IconName="@IconsFA.Solid.Icon("sitemap").Font" Text="Lists site pages in XML. Ensures search engines find and index content faster, critical for large or poorly linked websites."></HeadPage>
    </MudItem>
    <MudItem xs="12" md="10">
        <MudAlert Severity="Severity.Info" Variant="Variant.Filled" NoIcon="true" Class="mb-4" ContentAlignment="HorizontalAlignment.Center" Style="text-align: center;">
            <MudText Typo="Typo.h4">The only 100% free and unlimited platform</MudText>
            <MudText Typo="Typo.body1">It runs 100% in your environment, so you may need to enable CORS for this domain: https://www.web-standards.com/</MudText>
        </MudAlert>
    </MudItem>
    <MudItem xs="12" md="10">
        <MudTextField T="string" Label="Type your domain" @bind-Text="@Search" Immediate="true" OnKeyDown="@KeyPress" Class="mb-2" Variant="Variant.Outlined">
        </MudTextField>
    </MudItem>
    <MudItem xs="12" md="10">
        <MudToolBar Gutters="false" WrapContent="true">
            <MudNumericField @bind-Value="MaxDepth" Label="Page Depth" Min="1" Max="10" Variant="Variant.Outlined" Class="me-3" />
            <MudSelect @bind-Value="IgnoreRel" Label="Ignore Rel" Clearable="true" MultiSelection="true" Variant="Variant.Outlined" Class="me-3" Disabled="true">
                <MudSelectItem Value="@("alternate")">alternate</MudSelectItem>
                <MudSelectItem Value="@("author")">author</MudSelectItem>
                <MudSelectItem Value="@("bookmark")">bookmark</MudSelectItem>
                <MudSelectItem Value="@("external")">external</MudSelectItem>
                <MudSelectItem Value="@("help")">help</MudSelectItem>
                <MudSelectItem Value="@("license")">license</MudSelectItem>
                <MudSelectItem Value="@("next")">next</MudSelectItem>
                <MudSelectItem Value="@("nofollow")">nofollow</MudSelectItem>
                <MudSelectItem Value="@("noreferrer")">noreferrer</MudSelectItem>
                <MudSelectItem Value="@("noopener")">noopener</MudSelectItem>
                <MudSelectItem Value="@("prev")">prev</MudSelectItem>
                <MudSelectItem Value="@("search")">search</MudSelectItem>
                <MudSelectItem Value="@("tag")">tag</MudSelectItem>
            </MudSelect>
            <MudSelect @bind-Value="IgnoreTarget" Label="Ignore Target" Clearable="true" MultiSelection="true" Variant="Variant.Outlined" Class="me-3" Disabled="true">
                <MudSelectItem Value="@("_blank")">_blank</MudSelectItem>
                <MudSelectItem Value="@("_parent")">_parent</MudSelectItem>
                <MudSelectItem Value="@("_self")">_self</MudSelectItem>
                <MudSelectItem Value="@("_top")">_top</MudSelectItem>
            </MudSelect>
            <MudIconButton Icon="@Icons.Material.Outlined.Search" Color="Color.Primary" OnClick="StartCrawling" />
        </MudToolBar>
    </MudItem>
    <MudItem xs="12" md="10">
        <MudPaper Class="pa-6 mt-6">
            <MudText Typo="Typo.h5" Color="Color.Secondary" GutterBottom="true">About sitemap generator</MudText>
            <MudText Typo="Typo.body1" Class="mb-4" Align="Align.Justify">
                A sitemap is an XML file that lists the important pages of your website. It helps search engines like Google and Bing
                discover, crawl, and index content more efficiently. This is especially useful for large websites, single-page
                applications (SPAs), or sites with pages not easily accessible by normal navigation.
            </MudText>

            <MudText Typo="Typo.h5" Color="Color.Secondary" GutterBottom="true">Standards</MudText>
            <MudText Typo="Typo.body1" Class="mb-4" Align="Align.Justify">
                This generator follows the <b>Sitemap Protocol 0.9</b>, producing valid XML with tags such as
                <code>&lt;loc&gt;</code> (URL) and <code>&lt;lastmod&gt;</code> (last modification date).
                The format is fully supported by all major search engines.
            </MudText>

            <MudText Typo="Typo.h5" Color="Color.Secondary" GutterBottom="true">Limits</MudText>
            <MudText Typo="Typo.body1" Class="mb-4" Align="Align.Justify">
                A sitemap can include up to <b>50,000 URLs</b> or <b>50MB</b> when uncompressed. Large websites can use a
                <i>sitemap index</i> to reference multiple sitemap files. Compressed sitemaps (<code>.gz</code>) are also supported.
            </MudText>

            <MudText Typo="Typo.h5" Color="Color.Secondary" GutterBottom="true">Why It Matters</MudText>
            <ul class="mb-4">
                <li>Improves SEO by ensuring all important pages are visible to crawlers.</li>
                <li>Helps search engines prioritize fresh and frequently updated content.</li>
                <li>Supports standards recognized by all major search engines.</li>
            </ul>

            <MudText Typo="Typo.h5" Color="Color.Secondary" GutterBottom="true">Usage</MudText>
            <ul class="mb-4">
                <li>Save the sitemap at <code>https://yourdomain.com/sitemap.xml</code>.</li>
                <li>
                    Add a reference in <code>robots.txt</code>: <br />
                    <code>Sitemap: https://yourdomain.com/sitemap.xml</code>
                </li>
                <li>Submit it to Google Search Console, Bing Webmaster Tools, and other search engines for faster discovery.</li>
            </ul>

            <MudText Typo="Typo.body2" Class="mt-4" Align="Align.Justify">
                Tip: Keep <code>&lt;lastmod&gt;</code> accurate and update the sitemap only after meaningful content changes.
            </MudText>
        </MudPaper>
    </MudItem>
</MudGrid>

<style>
    ul {
        text-align: justify;
        margin-bottom: 0.5rem;
        line-height: 1.7;
        padding-left: 1.4rem;
        list-style-type: disc;
    }

        ul li {
            padding-left: 0.1rem;
        }
</style>

@code {

    [Parameter][SupplyParameterFromQuery(Name = "language")] public string? Language { get; set; }
    [Parameter][SupplyParameterFromQuery(Name = "platform")] public string? Platform { get; set; }

    public string? Search { get; set; }

    private int MaxDepth { get; set; } = 2;
    private string? IgnoreRel { get; set; } = "nofollow";
    private string? IgnoreTarget { get; set; } = null;

    private Uri? _baseUri { get; set; }
    private string? ResultXml { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Platform.NotEmpty())
            {
                await JsRuntime.InvokeAsync<string>("SetLocalStorage", "platform", Platform);
            }
            else
            {
                await JsRuntime.InvokeAsync<string>("LoadAppVariables");
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task KeyPress(KeyboardEventArgs args)
    {
        if (Search.Empty()) return;

        if (args.Key == "Enter")
        {
            await StartCrawling();
        }
    }

    private async Task StartCrawling()
    {
        try
        {
            if (!Uri.TryCreate(Search, UriKind.Absolute, out var uri))
            {
                Snackbar.Add("Invalid URL", Severity.Error);
                return;
            }

            _baseUri = uri;
            ResultXml = null;

            var http = HttpClientFactory.CreateClient();
            var helper = new SitemapHelper(http, Search, false, false, false, true, null, 2);

            AppStateStatic.ProcessingStarted?.Invoke();
            ResultXml = await helper.RunAsync();
            AppStateStatic.ProcessingFinished?.Invoke();

            await JsRuntime.InvokeVoidAsync("jsSaveAsFile", "sitemap.xml", "application/xml", ResultXml);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

}
